#include "conpty_common.h"
#include <string>

#ifdef ENABLE_CONPTY

HRESULT CreatePseudoConsoleAndPipes(HPCON* phPC, HANDLE* phPipeIn, HANDLE* phPipeOut) //,
	                                //HANDLE* hPipePTYIn, HANDLE* hPipePTYOut)
{
    HRESULT hr{ E_UNEXPECTED };
	HANDLE hPipePTYIn{ INVALID_HANDLE_VALUE };
    HANDLE hPipePTYOut{ INVALID_HANDLE_VALUE };
    // Create the pipes to which the ConPTY will connect
    if (CreatePipe(&hPipePTYIn, phPipeOut, NULL, 0) &&
        CreatePipe(phPipeIn, &hPipePTYOut, NULL, 0))
    {
        // Determine required size of Pseudo Console
        COORD consoleSize{};
        CONSOLE_SCREEN_BUFFER_INFO csbi{};
        HANDLE hConsole{ GetStdHandle(STD_OUTPUT_HANDLE) };
        if (GetConsoleScreenBufferInfo(hConsole, &csbi))
        {
            consoleSize.X = csbi.srWindow.Right - csbi.srWindow.Left + 1;
            consoleSize.Y = csbi.srWindow.Bottom - csbi.srWindow.Top + 1;
        }

        // Create the Pseudo Console of the required size, attached to the PTY-end of the pipes
        hr = CreatePseudoConsole(consoleSize, hPipePTYIn, hPipePTYOut, 0, phPC);

        // Note: We can close the handles to the PTY-end of the pipes here
        // because the handles are dup'ed into the ConHost and will be released
        // when the ConPTY is destroyed.
        if (INVALID_HANDLE_VALUE != *phPipeOut) CloseHandle(*phPipeOut);
        if (INVALID_HANDLE_VALUE != *phPipeIn) CloseHandle(*phPipeIn);
    }

    return hr;
}

// Initializes the specified startup info struct with the required properties and
// updates its thread attribute list with the specified ConPTY handle
HRESULT InitializeStartupInfoAttachedToPseudoConsole(STARTUPINFOEX* pStartupInfo, HPCON hPC)
{
    HRESULT hr{ E_UNEXPECTED };

    if (pStartupInfo)
    {
        size_t attrListSize{};

        pStartupInfo->StartupInfo.cb = sizeof(STARTUPINFOEX);

        // Get the size of the thread attribute list.
        InitializeProcThreadAttributeList(NULL, 1, 0, &attrListSize);

        // Allocate a thread attribute list of the correct size
        pStartupInfo->lpAttributeList =
            reinterpret_cast<LPPROC_THREAD_ATTRIBUTE_LIST>(malloc(attrListSize));

        // Initialize thread attribute list
        if (pStartupInfo->lpAttributeList
            && InitializeProcThreadAttributeList(pStartupInfo->lpAttributeList, 1, 0, &attrListSize))
        {
            // Set Pseudo Console attribute
            hr = UpdateProcThreadAttribute(
                pStartupInfo->lpAttributeList,
                0,
                PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE,
                hPC,
                sizeof(HPCON),
                NULL,
                NULL)
                ? S_OK
                : HRESULT_FROM_WIN32(GetLastError());
        }
        else
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
        }
    }
    return hr;
}


ConPTY::ConPTY(int cols, int rows, int input_mode, int output_mode) {
    pty_started = false;

    wchar_t szCommand[]{ L"c:\\windows\\system32\\cmd.exe" };
    HRESULT hr{ E_UNEXPECTED };
    //HANDLE hConsole = { GetStdHandle(STD_OUTPUT_HANDLE) };

    // Enable Console VT Processing
    DWORD consoleMode{};
    //GetConsoleMode(hConsole, &consoleMode);
    //hr = SetConsoleMode(hConsole, consoleMode | ENABLE_VIRTUAL_TERMINAL_PROCESSING)
    //    ? S_OK
    //    : GetLastError();
    if (true)
    {
        HPCON hPC{ INVALID_HANDLE_VALUE };

        //  Create the Pseudo Console and pipes to it
        HANDLE hPipeIn{ INVALID_HANDLE_VALUE };
        HANDLE hPipeOut{ INVALID_HANDLE_VALUE };
		//HANDLE hPipePTYIn{ INVALID_HANDLE_VALUE };
		//HANDLE hPipePTYOut{ INVALID_HANDLE_VALUE };
		hr = CreatePseudoConsoleAndPipes(&hPC, &hPipeIn, &hPipeOut); //, &hPipePTYIn, &hPipePTYOut);
        if (S_OK == hr)
        {
            // Create & start thread to listen to the incoming pipe
            // Note: Using CRT-safe _beginthread() rather than CreateThread()
            //HANDLE hPipeListenerThread{ reinterpret_cast<HANDLE>(_beginthread(PipeListener, 0, hPipeIn)) };

            // Initialize the necessary startup info struct        
            STARTUPINFOEX startupInfo{};
            if (S_OK == InitializeStartupInfoAttachedToPseudoConsole(&startupInfo, hPC))
            {
                // Launch ping to emit some text back via the pipe
                PROCESS_INFORMATION piClient{};
				startupInfo.StartupInfo.hStdInput = hPipeOut;
				startupInfo.StartupInfo.hStdError = hPipeIn;
				startupInfo.StartupInfo.hStdOutput = hPipeIn;
                startupInfo.StartupInfo.dwFlags |= STARTF_USESTDHANDLES;

                hr = CreateProcess(
                    NULL,                           // No module name - use Command Line
                    szCommand,                      // Command Line
                    NULL,                           // Process handle not inheritable
                    NULL,                           // Thread handle not inheritable
                    FALSE,                          // Inherit handles
                    CREATE_UNICODE_ENVIRONMENT,     // Creation flags
                    NULL,                           // Use parent's environment block
                    NULL,                           // Use parent's starting directory 
                    &startupInfo.StartupInfo,       // Pointer to STARTUPINFO
                    &piClient)                      // Pointer to PROCESS_INFORMATION
                    ? S_OK
                    : GetLastError();

                if (S_OK == hr)
                {
                    // Wait up to 10s for ping process to complete
//                    WaitForSingleObject(piClient.hThread, 10 * 1000);

                    // Allow listening thread to catch-up with final output!
  //                  Sleep(500);
					std::cout << "Process initialized successfully?" << std::endl;

					pty_handle = hPC;
					conin = hPipeIn;
					conout = hPipeOut;
					pty_created = true;
					pid = piClient.dwProcessId;
					process = piClient.hProcess;

					std::cout << "Process alive: " << is_alive() << std::endl;
					std::cout << "Process EOF: " << is_eof() << std::endl;

					read(1000, true);
                }

                // --- CLOSEDOWN ---

                // Now safe to clean-up client app's process-info & thread
                //CloseHandle(piClient.hThread);
                //CloseHandle(piClient.hProcess);

                // Cleanup attribute list
                //DeleteProcThreadAttributeList(startupInfo.lpAttributeList);
                //free(startupInfo.lpAttributeList);
            }

            // Close ConPTY - this will terminate client process if running
            //ClosePseudoConsole(hPC);

            // Clean-up the pipes
            //if (INVALID_HANDLE_VALUE != hPipeOut) CloseHandle(hPipeOut);
            //if (INVALID_HANDLE_VALUE != hPipeIn) CloseHandle(hPipeIn);
        }
    }

    
}

ConPTY::~ConPTY() {
    /**if (pty_started) {
        // Close process
        CloseHandle(process_info.hThread);
        CloseHandle(process_info.hProcess);

        // Cleanup attribute list
        DeleteProcThreadAttributeList(startup_info.lpAttributeList);
        free(startup_info.lpAttributeList);
    }

    if (pty_created) {
        // Close ConPTY - this will terminate client process if running
        ClosePseudoConsole(pty_handle);

        // Clean-up the pipes
        if (INVALID_HANDLE_VALUE != conout) CloseHandle(conout);
        if (INVALID_HANDLE_VALUE != conin) CloseHandle(conin);
    }**/
}
 
bool ConPTY::spawn(std::wstring appname, std::wstring cmdline, std::wstring cwd, std::wstring env) {
    return false;
}

void ConPTY::set_size(int cols, int rows) {
    COORD consoleSize{};
    consoleSize.X = rows;
    consoleSize.Y = cols;
    HRESULT hr = ResizePseudoConsole(pty_handle, consoleSize);

    if (hr != S_OK) {
        char* err;
        if (!FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
            NULL, hr,
            MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // default language
            (LPTSTR)&err, 0, NULL)) {
            throw std::runtime_error("An unexpected error has occurred");
        }

        throw std::runtime_error(err);
        LocalFree(err);
    }
}
#else
ConPTY::ConPTY(int cols, int rows, int input_mode, int output_mode) {
    throw std::runtime_error("pywinpty was compiled without ConPTY support");
}

ConPTY::~ConPTY() {

}

bool ConPTY::spawn(std::wstring appname, std::wstring cmdline, std::wstring cwd, std::wstring env) {
    throw std::runtime_error("pywinpty was compiled without ConPTY support");
}

void ConPTY::set_size(int cols, int rows) {
    throw std::runtime_error("pywinpty was compiled without ConPTY support");
}
#endif  // ENABLE_CONPTY

std::wstring ConPTY::read_stderr(uint64_t length, bool blocking) {
    throw std::runtime_error("ConPTY stderr reading is disabled");
}
